// Generated by gencpp from file ecobot/ussensor_mngtRequest.msg
// DO NOT EDIT!


#ifndef ECOBOT_MESSAGE_USSENSOR_MNGTREQUEST_H
#define ECOBOT_MESSAGE_USSENSOR_MNGTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ecobot
{
template <class ContainerAllocator>
struct ussensor_mngtRequest_
{
  typedef ussensor_mngtRequest_<ContainerAllocator> Type;

  ussensor_mngtRequest_()
    : sensor_id(0)
    , message()  {
    }
  ussensor_mngtRequest_(const ContainerAllocator& _alloc)
    : sensor_id(0)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _sensor_id_type;
  _sensor_id_type sensor_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  _message_type message;





  typedef boost::shared_ptr< ::ecobot::ussensor_mngtRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ecobot::ussensor_mngtRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ussensor_mngtRequest_

typedef ::ecobot::ussensor_mngtRequest_<std::allocator<void> > ussensor_mngtRequest;

typedef boost::shared_ptr< ::ecobot::ussensor_mngtRequest > ussensor_mngtRequestPtr;
typedef boost::shared_ptr< ::ecobot::ussensor_mngtRequest const> ussensor_mngtRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ecobot::ussensor_mngtRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ecobot::ussensor_mngtRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ecobot::ussensor_mngtRequest_<ContainerAllocator1> & lhs, const ::ecobot::ussensor_mngtRequest_<ContainerAllocator2> & rhs)
{
  return lhs.sensor_id == rhs.sensor_id &&
    lhs.message == rhs.message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ecobot::ussensor_mngtRequest_<ContainerAllocator1> & lhs, const ::ecobot::ussensor_mngtRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ecobot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ecobot::ussensor_mngtRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ecobot::ussensor_mngtRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ecobot::ussensor_mngtRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ecobot::ussensor_mngtRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ecobot::ussensor_mngtRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ecobot::ussensor_mngtRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ecobot::ussensor_mngtRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e710790685e45ee98b3e6c415ff8fdb6";
  }

  static const char* value(const ::ecobot::ussensor_mngtRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe710790685e45ee9ULL;
  static const uint64_t static_value2 = 0x8b3e6c415ff8fdb6ULL;
};

template<class ContainerAllocator>
struct DataType< ::ecobot::ussensor_mngtRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ecobot/ussensor_mngtRequest";
  }

  static const char* value(const ::ecobot::ussensor_mngtRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ecobot::ussensor_mngtRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Mybot ultrasound sensors management message\n"
"# \n"
"#  - message: should be either ACTIVATE, DEACTIVATE or STATUS\n"
"#  - sensor_id: ID of the US sensor to activate or deactivate. \n"
"#  - response: a short message confirming the action of the service\n"
"#  - deactivated_id: a list of US sensor IDS that have been deactivated\n"
"\n"
"int8 sensor_id\n"
"string message\n"
;
  }

  static const char* value(const ::ecobot::ussensor_mngtRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ecobot::ussensor_mngtRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sensor_id);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ussensor_mngtRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ecobot::ussensor_mngtRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ecobot::ussensor_mngtRequest_<ContainerAllocator>& v)
  {
    s << indent << "sensor_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.sensor_id);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ECOBOT_MESSAGE_USSENSOR_MNGTREQUEST_H
